by.adm2 = paste0("NAME_",2))
poly.adm2 <- CountryInfo$GADM_list()[[paste0('Admin-',2)]]
st_is_valid(poly.adm2)
admin2.sf <- sf::st_join(GPS.dat, poly.adm2) %>%
sf::st_transform(sf::st_crs(poly.adm2))
admin2.sf <- admin2.sf[!duplicated(admin2.sf[,c('DHSCLUST')]),]
DHS.country.meta
pkgload::load_all()
run_app()
RColorBrewer::brewer.pal(9, "Blues")
pkgload::load_all()
run_app()
pkgload::load_all()
run_app()
pkgload::load_all()
run_app()
tmp.plot.notitle <- prevMap.leaflet(res.obj = mdg.ex.model.res$Direct$`Admin-2`,
gadm.shp = mdg.ex.GADM.list[["Admin-2"]],
model.gadm.level = 2,
strata.gadm.level = 2,
value.to.plot ='mean',
legend.label = 'mean',
use.basemap='OSM')
pkgload::load_all()
tmp.plot.notitle <- prevMap.leaflet(res.obj = mdg.ex.model.res$Direct$`Admin-2`,
gadm.shp = mdg.ex.GADM.list[["Admin-2"]],
model.gadm.level = 2,
strata.gadm.level = 2,
value.to.plot ='mean',
legend.label = 'mean',
use.basemap='OSM')
pkgload::load_all()
tmp.plot.notitle <- prevMap.leaflet(res.obj = mdg.ex.model.res$Direct$`Admin-2`,
gadm.shp = mdg.ex.GADM.list[["Admin-2"]],
model.gadm.level = 2,
strata.gadm.level = 2,
value.to.plot ='mean',
legend.label = 'mean',
use.basemap='OSM')
tmp.plot.notitle
tmp.plot4 <- prevMap.leaflet(res.obj = mdg.ex.model.res$Unit$`Admin-2`,
gadm.shp = mdg.ex.GADM.list[["Admin-2"]],
model.gadm.level = 2,
strata.gadm.level = 2,
value.to.plot ='mean',
legend.label = 'value',
map.title='this is a long longlong title',
threshold.p = 0.2,
use.basemap='OSM')
tmp.plot4
pkgload::load_all()
tmp.plot4 <- prevMap.leaflet(res.obj = mdg.ex.model.res$Unit$`Admin-1`,
gadm.shp = mdg.ex.GADM.list[["Admin-1"]],
model.gadm.level = 1,
strata.gadm.level = 2,
value.to.plot ='mean',
legend.label = 'value',
map.title='this is a long longlong title',
threshold.p = 0.2,
use.basemap='OSM')
tmp.plot4
renv::install('mapview')
renv::snapshot()
pkgload::load_all()
run_app()
tmp.plot.notitle <- prevMap.leaflet(res.obj = mdg.ex.model.res$Direct$`Admin-2`,
gadm.shp = mdg.ex.GADM.list[["Admin-2"]],
model.gadm.level = 2,
strata.gadm.level = 2,
value.to.plot ='mean',
legend.label = 'mean',
use.basemap='OSM')
tmp.plot.notitle
pkgload::load_all()
run_app()
run_app()
pkgload::load_all()
library(shinydashboard)
library(sf)
library(magrittr)
library(sn)
library(INLA)
library(prettymapr)
library(mapview)
library(bookdown)
library(markdown)
library(mapview)
detach("package:mapview", unload = TRUE)
library(mapview)
library(mapview)
tmp.plot.notitle <- prevMap.leaflet(res.obj = mdg.ex.model.res$Direct$`Admin-2`,
gadm.shp = mdg.ex.GADM.list[["Admin-2"]],
model.gadm.level = 2,
strata.gadm.level = 2,
value.to.plot ='mean',
legend.label = 'mean',
use.basemap='OSM')
tmp.plot.notitle
pkgload::load_all()
run_app()
library(leaflet)
# Sample data
data <- data.frame(
lon = runif(100, -180, 180),
lat = runif(100, -90, 90),
value = runif(100, 0, 10)
)
# Define color palette
colorPalette <- colorNumeric(palette = c("white", "darkblue"), domain = data$value)
# Create map
map <- leaflet(data) %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat, color = ~colorPalette(value), weight = 1, radius = 50000) %>%
addLegend("bottomright", pal = colorPalette, values = ~value,
title = "Value", opacity = 1)
map
library(prettymapr)
library(leaflet)
map
tmp.plot.notitle <- prevMap.leaflet(res.obj = mdg.ex.model.res$Direct$`Admin-2`,
gadm.shp = mdg.ex.GADM.list[["Admin-2"]],
model.gadm.level = 2,
strata.gadm.level = 2,
value.to.plot ='mean',
legend.label = 'mean',
use.basemap='OSM')
tmp.plot.notitle
map
tmp.plot4 <- prevMap.leaflet(res.obj = mdg.ex.model.res$Unit$`Admin-1`,
gadm.shp = mdg.ex.GADM.list[["Admin-1"]],
model.gadm.level = 1,
strata.gadm.level = 2,
value.to.plot ='mean',
legend.label = 'value',
map.title='this is a long longlong title',
threshold.p = 0.2,
use.basemap='OSM')
tmp.plot4
View(map)
View(tmp.plot4)
pkgload::load_all()
run_app()
run_app()
tmp.plot4
tmp.plot4 <- prevMap.leaflet(res.obj = mdg.ex.model.res$Unit$`Admin-1`,
gadm.shp = mdg.ex.GADM.list[["Admin-1"]],
model.gadm.level = 1,
strata.gadm.level = 2,
value.to.plot ='mean',
legend.label = 'value',
map.title='this is a long longlong title',
threshold.p = 0.2,
use.basemap='None')
tmp.plot4
mdg.ex.GADM.list[["Admin-1"]]
mdg.ex.model.res$Unit$`Admin-1`
reactiveConsole(TRUE)
CountryInfo <- CountryInfo$new()
AnalysisInfo <- AnalysisInfo$new()
### initialize settings
CountryInfo$WHO_version(T)
CountryInfo$use_basemap('OSM')
### country meta
ex.country <- 'Democratic Republic of the Congo'
ex.svy.year <- '2013'
strat.gadm.level <- 1
### indicator
ex.indicator.abbrev <-'CM_ECMR_C_NNR'
#file_path <-'C:/Users/wu-th/Downloads/CD_2013-14_DHS_06042024_60_143411.zip'
###############################################################
### store country meta in R6
###############################################################
### country and svy year info
CountryInfo$country(ex.country)
CountryInfo$svyYear_selected(ex.svy.year) #CountryInfo$svyYear_list(ex.svy.year)
country_iso3 <- DHS.country.meta[DHS.country.meta$CountryName==CountryInfo$country(),'ISO3_CountryCode']
### get shapefiles
if(!CountryInfo$WHO_version()){
country_shapefile <- get_country_shapefile(country=ex.country,source=NULL)
}else{
country_shapefile <- get_country_shapefile(country=ex.country,source='WHO')
}
CountryInfo$GADM_list(country_shapefile$country_shp_analysis)
CountryInfo$GADM_list_smoothed(country_shapefile$country_shp_smoothed)
CountryInfo$GADM_display_selected(country_shapefile$country_shp_smoothed[['National']])
### indicator info and stratification level
CountryInfo$svy_indicator_var(ex.indicator.abbrev)
CountryInfo$GADM_strata_level(strat.gadm.level)
###############################################################
### load data
###############################################################
### get recode and filenames for this variable
recode_for_ind_abbrev <- reactiveVal(NULL)
recode_for_ind_names <- reactiveVal(NULL)
recode_list_abbrev <- c('IR','PR','KR','BR','HR','MR','AR','CR')
recode_list_names <- c("Individual Recode","Household Member Recode","Children's Recode",
"Births Recode","Household Recode","Men's Recode",
"HIV Test Results Recode","Couples' Recode")
recode_for_ind_abbrev(recode_list_abbrev[which(full_ind_des[full_ind_des$ID==CountryInfo$svy_indicator_var(),
recode_list_abbrev]==T)])
### which recode (full names) are needed for this indicator
recode_for_ind_names(recode_list_names[which(full_ind_des[full_ind_des$ID==CountryInfo$svy_indicator_var(),
recode_list_abbrev]==T)])
### load survey data
country= CountryInfo$country()
svy_year = CountryInfo$svyYear_selected()
recode_names_list=recode_for_ind_names()
for (i in 1:length(recode_names_list)){
file_prefix <- find_DHS_dat_name(ex.country,ex.svy.year,recode =recode_names_list[i])
recode_path_found <- find_recode_path(file_path = file_path,
recode_file =file_prefix,
extensions = 'DTA')
recode.data <- suppressWarnings(haven::read_dta(recode_path_found))
recode.data <- as.data.frame(recode.data)
CountryInfo$update_svy_dat(recode_abbrev=recode_for_ind_abbrev()[i], new_dat=recode.data)
}
file_path <-'C:/Users/wu-th/Downloads/CD_2013-14_DHS_06042024_60_143411.zip'
reactiveConsole(TRUE)
CountryInfo <- CountryInfo$new()
### initialize settings
CountryInfo$WHO_version(T)
CountryInfo$use_basemap('OSM')
### country meta
ex.country <- 'Democratic Republic of the Congo'
ex.svy.year <- '2013'
strat.gadm.level <- 1
### indicator
ex.indicator.abbrev <-'CM_ECMR_C_NNR'
#file_path <-'C:/Users/wu-th/Downloads/CD_2013-14_DHS_06042024_60_143411.zip'
###############################################################
### store country meta in R6
###############################################################
### country and svy year info
CountryInfo$country(ex.country)
CountryInfo$svyYear_selected(ex.svy.year) #CountryInfo$svyYear_list(ex.svy.year)
country_iso3 <- DHS.country.meta[DHS.country.meta$CountryName==CountryInfo$country(),'ISO3_CountryCode']
### get shapefiles
if(!CountryInfo$WHO_version()){
country_shapefile <- get_country_shapefile(country=ex.country,source=NULL)
}else{
country_shapefile <- get_country_shapefile(country=ex.country,source='WHO')
}
CountryInfo$GADM_list(country_shapefile$country_shp_analysis)
CountryInfo$GADM_list_smoothed(country_shapefile$country_shp_smoothed)
CountryInfo$GADM_display_selected(country_shapefile$country_shp_smoothed[['National']])
### indicator info and stratification level
CountryInfo$svy_indicator_var(ex.indicator.abbrev)
CountryInfo$GADM_strata_level(strat.gadm.level)
###############################################################
### load data
###############################################################
### get recode and filenames for this variable
recode_for_ind_abbrev <- reactiveVal(NULL)
recode_for_ind_names <- reactiveVal(NULL)
recode_list_abbrev <- c('IR','PR','KR','BR','HR','MR','AR','CR')
recode_list_names <- c("Individual Recode","Household Member Recode","Children's Recode",
"Births Recode","Household Recode","Men's Recode",
"HIV Test Results Recode","Couples' Recode")
recode_for_ind_abbrev(recode_list_abbrev[which(full_ind_des[full_ind_des$ID==CountryInfo$svy_indicator_var(),
recode_list_abbrev]==T)])
### which recode (full names) are needed for this indicator
recode_for_ind_names(recode_list_names[which(full_ind_des[full_ind_des$ID==CountryInfo$svy_indicator_var(),
recode_list_abbrev]==T)])
### load survey data
country= CountryInfo$country()
svy_year = CountryInfo$svyYear_selected()
recode_names_list=recode_for_ind_names()
for (i in 1:length(recode_names_list)){
file_prefix <- find_DHS_dat_name(ex.country,ex.svy.year,recode =recode_names_list[i])
recode_path_found <- find_recode_path(file_path = file_path,
recode_file =file_prefix,
extensions = 'DTA')
recode.data <- suppressWarnings(haven::read_dta(recode_path_found))
recode.data <- as.data.frame(recode.data)
CountryInfo$update_svy_dat(recode_abbrev=recode_for_ind_abbrev()[i], new_dat=recode.data)
}
### load GPS data
## set survey GPS data
GPS_prefix <- find_DHS_dat_name(country,svy_year,recode = 'Geographic Data' )
GPS_path_found <- find_recode_path(file_path = file_path,
recode_file = GPS_prefix,
extensions = 'shp')
GPS.dat <- suppressWarnings(sf::st_read(GPS_path_found))
CountryInfo$svy_GPS_dat(GPS.dat)
### get analysis data set
svy_dat_list <- CountryInfo$svy_dat_list()
if(length(recode_for_ind_abbrev())>1){
svy_dat_recode <- svy_dat_list[recode_for_ind_abbrev()]
names(svy_dat_recode) <- as.character(get_recode_names(recode_for_ind_abbrev()))
}else{
svy_dat_recode <- svy_dat_list[[recode_for_ind_abbrev()]]
}
analysis_dat <- surveyPrev::getDHSindicator(Rdata=svy_dat_recode,
indicator = CountryInfo$svy_indicator_var())
CountryInfo$svy_analysis_dat(analysis_dat)
tmp.res.obj <- ncluster.map.interactive(gadm.level='Admin-1',
gadm.list=CountryInfo$GADM_list_smoothed(),
cluster.geo=GPS.dat)
tmp.res.obj
View(tmp.res.obj)
tmp.res.obj$map
gadm.level='Admin-1'
gadm.list=CountryInfo$GADM_list_smoothed()
cluster.geo=GPS.dat
renv::install("htmlwidgets@1.6.2")
renv::install("htmlwidgets@1.6.2",type='binary')
renv::snapshot()
renv::install('htmltools@0.5.7')
renv::snapshot()
renv::install('bslib@0.6.1')
renv::snapshot()
pkgload::load_all()
run_app()
file_path <-'C:/Users/wu-th/Downloads/CD_2013-14_DHS_06042024_60_143411.zip'
reactiveConsole(TRUE)
CountryInfo <- CountryInfo$new()
AnalysisInfo <- AnalysisInfo$new()
### initialize settings
CountryInfo$WHO_version(T)
CountryInfo$use_basemap('OSM')
### country meta
ex.country <- 'Democratic Republic of the Congo'
ex.svy.year <- '2013'
strat.gadm.level <- 1
### indicator
ex.indicator.abbrev <-'CM_ECMR_C_NNR'
### country and svy year info
CountryInfo$country(ex.country)
CountryInfo$svyYear_selected(ex.svy.year) #CountryInfo$svyYear_list(ex.svy.year)
country_iso3 <- DHS.country.meta[DHS.country.meta$CountryName==CountryInfo$country(),'ISO3_CountryCode']
### get shapefiles
if(!CountryInfo$WHO_version()){
country_shapefile <- get_country_shapefile(country=ex.country,source=NULL)
}else{
country_shapefile <- get_country_shapefile(country=ex.country,source='WHO')
}
CountryInfo$GADM_list(country_shapefile$country_shp_analysis)
CountryInfo$GADM_list_smoothed(country_shapefile$country_shp_smoothed)
CountryInfo$GADM_display_selected(country_shapefile$country_shp_smoothed[['National']])
### indicator info and stratification level
CountryInfo$svy_indicator_var(ex.indicator.abbrev)
CountryInfo$GADM_strata_level(strat.gadm.level)
###############################################################
### load data
###############################################################
### get recode and filenames for this variable
recode_for_ind_abbrev <- reactiveVal(NULL)
recode_for_ind_names <- reactiveVal(NULL)
recode_list_abbrev <- c('IR','PR','KR','BR','HR','MR','AR','CR')
recode_list_names <- c("Individual Recode","Household Member Recode","Children's Recode",
"Births Recode","Household Recode","Men's Recode",
"HIV Test Results Recode","Couples' Recode")
recode_for_ind_abbrev(recode_list_abbrev[which(full_ind_des[full_ind_des$ID==CountryInfo$svy_indicator_var(),
recode_list_abbrev]==T)])
### which recode (full names) are needed for this indicator
recode_for_ind_names(recode_list_names[which(full_ind_des[full_ind_des$ID==CountryInfo$svy_indicator_var(),
recode_list_abbrev]==T)])
### load survey data
country= CountryInfo$country()
svy_year = CountryInfo$svyYear_selected()
recode_names_list=recode_for_ind_names()
for (i in 1:length(recode_names_list)){
file_prefix <- find_DHS_dat_name(ex.country,ex.svy.year,recode =recode_names_list[i])
recode_path_found <- find_recode_path(file_path = file_path,
recode_file =file_prefix,
extensions = 'DTA')
recode.data <- suppressWarnings(haven::read_dta(recode_path_found))
recode.data <- as.data.frame(recode.data)
CountryInfo$update_svy_dat(recode_abbrev=recode_for_ind_abbrev()[i], new_dat=recode.data)
}
### load GPS data
## set survey GPS data
GPS_prefix <- find_DHS_dat_name(country,svy_year,recode = 'Geographic Data' )
GPS_path_found <- find_recode_path(file_path = file_path,
recode_file = GPS_prefix,
extensions = 'shp')
GPS.dat <- suppressWarnings(sf::st_read(GPS_path_found))
CountryInfo$svy_GPS_dat(GPS.dat)
### get analysis data set
svy_dat_list <- CountryInfo$svy_dat_list()
if(length(recode_for_ind_abbrev())>1){
svy_dat_recode <- svy_dat_list[recode_for_ind_abbrev()]
names(svy_dat_recode) <- as.character(get_recode_names(recode_for_ind_abbrev()))
}else{
svy_dat_recode <- svy_dat_list[[recode_for_ind_abbrev()]]
}
analysis_dat <- surveyPrev::getDHSindicator(Rdata=svy_dat_recode,
indicator = CountryInfo$svy_indicator_var())
CountryInfo$svy_analysis_dat(analysis_dat)
gadm.level='Admin-1'
gadm.list=CountryInfo$GADM_list_smoothed()
cluster.geo=GPS.dat
gadm.level.num=admin_to_num(gadm.level)
adm.sf <- gadm.list[[paste0('Admin-',1)]]
adm.sf$admin1.name <- adm.sf[[paste0("NAME_",1)]]
if(is.null(cluster.info)){
cluster.info <- surveyPrev::clusterInfo(geo=cluster.geo,
poly.adm1=gadm.list[[paste0('Admin-',1)]],
poly.adm2=gadm.list[[paste0('Admin-',1)]],
by.adm1 = paste0("NAME_",1),
by.adm2 = paste0("NAME_",1))
}
cluster.info=NULL
adm.sf <- gadm.list[[paste0('Admin-',1)]]
adm.sf$admin1.name <- adm.sf[[paste0("NAME_",1)]]
if(is.null(cluster.info)){
cluster.info <- surveyPrev::clusterInfo(geo=cluster.geo,
poly.adm1=gadm.list[[paste0('Admin-',1)]],
poly.adm2=gadm.list[[paste0('Admin-',1)]],
by.adm1 = paste0("NAME_",1),
by.adm2 = paste0("NAME_",1))
}
adm.sf <- adm.sf %>%
dplyr::left_join(cluster.info$data %>% dplyr::group_by(admin1.name) %>%
dplyr::summarise(n.clusters=dplyr::n()))
hover_labels <- adm.sf %>%
dplyr::rowwise() %>%
dplyr::mutate(hover_label = {
label <- paste0('Region: ', admin1.name, '<br/>')
label <- paste0(label,
'Number of clusters: ',n.clusters ,'<br/>')
htmltools::HTML(label)  # Ensure that HTML rendering is applied
}) %>%
dplyr::ungroup() %>%
dplyr::pull(hover_label)
cluster.map.interactive <- adm.sf  %>% leaflet::leaflet(options = leaflet::leafletOptions(zoomSnap = 0.1))
cluster.map.interactive
use.basemap='OSM'
cluster.map.interactive <- add_basemap(original.map=cluster.map.interactive,
static.ind= F,
basemap.type =use.basemap)
cluster.map.interactive
palette_colors <- RColorBrewer::brewer.pal(9, "Blues")
pal <- leaflet::colorNumeric(palette = palette_colors,
domain = adm.sf$n.clusters,
na.color = '#AEAEAE')
pal
cluster.map.interactive <- cluster.map.interactive %>%
leaflet::addPolygons(
fillColor = ~pal(n.clusters),
weight = 1,
color = "gray",
fillOpacity = 1,
opacity = 1,
label = ~ hover_labels, # display hover label
labelOptions = leaflet::labelOptions(
style = list("color" ="black"),  # Text color
direction = "auto",
textsize = "15px",
noHide = F,  # Label disappears when not hovering
offset = c(0,0)  # Adjust label position if necessary
),
highlightOptions = leaflet::highlightOptions(
weight = 2,
color = "#666",
fillOpacity = 0.75,
bringToFront = TRUE,
sendToBack=T)
)
cluster.map.interactive
pkgload::load_all()
run_app()
pkgload::load_all()
run_app()
renv::install('richardli/surveyPrev')
renv::snapshot()
renv::install('htmltools')
renv::install('htmlwidgets')
renv::install('bslib')
renv::snapshot()
golem::fill_desc(
pkg_name = "SurveyPrevRshinyWHO", # The Name of the package containing the App
pkg_title = "saeforhealth", # The Title of the package containing the App
pkg_description = "PKG_DESC.", # The Description of the package containing the App
author_first_name = "Yunhan", # Your First Name
author_last_name = "Wu", # Your Last Name
author_email = "yunhanwu@uw.edu", # Your Email
repo_url = 'https://github.com/wu-thomas/WHO_saeforhealth', # The URL of the GitHub Repo (optional),
pkg_version = "1.0.0.0" # The Version of the package containing the App
)
usethis::use_mit_license("Golem User") # You can set another license here
golem::fill_desc(
pkg_name = "SurveyPrevRshinyWHO", # The Name of the package containing the App
pkg_title = "saeforhealth", # The Title of the package containing the App
pkg_description = "The Shiny app for performing small area estimation and prevalence mapping of maternal health indicators in the region of Africa. The app is an user friendly implemtation of R package surveyPrev.", # The Description of the package containing the App
author_first_name = "Yunhan", # Your First Name
author_last_name = "Wu", # Your Last Name
author_email = "yunhanwu@uw.edu", # Your Email
repo_url = 'https://github.com/wu-thomas/WHO_saeforhealth', # The URL of the GitHub Repo (optional),
pkg_version = "1.0.0.0" # The Version of the package containing the App
)
rstudioapi::navigateToFile("dev/02_dev.R")
attachment::att_amend_desc()
usethis::use_package("pkgload")
attachment::att_amend_desc()
usethis::use_package("pkgload")
attachment::att_amend_desc()
attachment::att_amend_desc()
attachment::att_amend_desc()
attachment::att_amend_desc()
attachment::att_amend_desc()
pkgload::load_all()
run_app()
attachment::att_amend_desc()
usethis::use_package("pkgload")
pkgload::load_all()
run_app()
?tabItems
pkgload::load_all()
run_app()
?usethis
usethis::use_package("magrittr", type = "Depends")
